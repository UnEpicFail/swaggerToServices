import { Injectable } from '@angular/core';
import { Http, Headers, RequestOptions, URLSearchParams, QueryEncoder } from '@angular/http';
 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';

import { FlashMessagerService } from '../lib/n3-ng-grid/flash-messager.service' //очень плохо, надо придумать как то лудше

{{=<% %>=}}
<%#flatImports%>
<%#imports%>
import { <%.%> } from './<%from%>/<%.%>';
<%/imports%>
<%/flatImports%>
<%={{ }}=%>

@Injectable()
export class {{serviceName}} {

    constructor(public http: Http, public fs:FlashMessagerService) { }

    {{#flatPaths}}
    /**
     * {{{data.description}}}
     * @method
     * @name {{name}}
     *
     {{#data.parameters.sortedParameters.path.true}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> *{{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}}
     {{/data.parameters.sortedParameters.path.true}}
     {{#data.parameters.sortedParameters.body.true}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> *{{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}} 
     {{/data.parameters.sortedParameters.body.true}}
     {{#data.parameters.sortedParameters.query.true}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> *{{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}}
     {{/data.parameters.sortedParameters.query.true}}
     {{#data.parameters.sortedParameters.formData.true}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> *{{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}}
     {{/data.parameters.sortedParameters.formData.true}}
     {{#data.parameters.sortedParameters.body.false}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> {{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}}
     {{/data.parameters.sortedParameters.body.false}}
     {{#data.parameters.sortedParameters.query.false}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> {{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}}
     {{/data.parameters.sortedParameters.query.false}}
     {{#data.parameters.sortedParameters.formData.false}}
     * @param {{=<% %>=}}{<%type%>}<%={{ }}=%> {{name}} - {{{description}}} {{#items.enum.length}}[{{items.enum}}]{{/items.enum.length}}
     {{/data.parameters.sortedParameters.formData.false}}
     form - не обазательный параметр, ссылка на форму, для подсветки ошибок
     */
    public {{name}}(
        {{#data.parameters.sortedParameters.path.true}}
        {{name}}: {{type}},
        {{/data.parameters.sortedParameters.path.true}}
        {{#data.parameters.sortedParameters.body.true}}
        {{name}}: {{type}},
        {{/data.parameters.sortedParameters.body.true}}
        {{#data.parameters.sortedParameters.query.true}}
        {{name}}: {{type}},
        {{/data.parameters.sortedParameters.query.true}}
        {{#data.parameters.sortedParameters.formData.true}}
        {{name}}: {{type}},
        {{/data.parameters.sortedParameters.formData.true}}
        {{#data.parameters.sortedParameters.body.false}}
        {{name}}?: {{type}},
        {{/data.parameters.sortedParameters.body.false}}
        {{#data.parameters.sortedParameters.query.false}}
        {{name}}?: {{type}},
        {{/data.parameters.sortedParameters.query.false}}
        {{#data.parameters.sortedParameters.formData.false}}
        {{name}}?: {{type}},
        {{/data.parameters.sortedParameters.formData.false}}
        form?
    ) {
        let _path = '{{{basePath}}}{{{data.url}}}';
        let _body = '';
        {{=<% %>=}}
        <%#data.parameters.sortedParameters.path.true%>
        _path = _path.replace(/{<%name%>}/ig, (typeof <%name%> !== 'string')?JSON.stringify(<%name%>):<%name%>);
        <%/data.parameters.sortedParameters.path.true%>
        <%={{ }}=%>
        let _headers = new Headers()
        _headers.append('Access-Control-Allow-Origin', '*')
        {{#data.parameters.sortedParameters.query}}
        let q = new QueryEncoder();
        q.encodeKey = function(str){
            return str;
        }  
        let _search = new URLSearchParams('', q)
        {{/data.parameters.sortedParameters.query}}
        
        {{#data.parameters.sortedParameters.header.true}}
        _headers.append('{{name}}', '{{enum}}');
        {{/data.parameters.sortedParameters.header.true}}
        _headers.append('X-JWT-Token', localStorage.getItem('token'));
        {{#data.parameters.sortedParameters.query.true}}
        if(Array.isArray({{name}})) {
            {{name}}.map(item => {
                _search.append('{{name}}[]', ''+item);     
            })
        } else {
            _search.append('{{name}}', ''+{{name}}); 
        }
        {{/data.parameters.sortedParameters.query.true}}
        {{#data.parameters.sortedParameters.query.false}}
        if (typeof {{name}} !== 'undefined' && {{name}} !== null ){
            if(Array.isArray({{name}})) {
                {{name}}.map(item => {
                    _search.append('{{name}}[]', ''+item);     
                })
            } else {
                _search.append('{{name}}', ''+{{name}}); 
            }
        }
        {{/data.parameters.sortedParameters.query.false}}

        {{#data.parameters.sortedParameters.body.true}}
        _body += JSON.stringify(this.unnulling({{name}}));
        {{/data.parameters.sortedParameters.body.true}}
        {{#data.parameters.sortedParameters.body.false}}
        if (typeof {{name}} !== 'undefined' && {{name}} !== null )
            _body += JSON.stringify(this.unnulling({{name}}));
        {{/data.parameters.sortedParameters.body.false}}

        let _params = new RequestOptions ({
            {{#data.parameters.sortedParameters.header}}
            headers: _headers,
            {{/data.parameters.sortedParameters.header}}
            {{#data.parameters.sortedParameters.query}}
            search: _search,
            {{/data.parameters.sortedParameters.query}}
        })

        {{#data.parameters.sortedParameters.body}}
        return this.http['{{data.type}}'](_path, _body, _params).map(this.extractData).catch((err)=>{return this.extractError(err, form)});
        {{/data.parameters.sortedParameters.body}}
        {{^data.parameters.sortedParameters.body}}
        return this.http['{{data.type}}'](_path, _params).map(this.extractData).catch((err)=>{return this.extractError(err, form)});
       {{/data.parameters.sortedParameters.body}}
    }
    {{/flatPaths}}


    extractData(res) {
        var body = {}
        try{
            body = JSON.parse(res.text());
        } catch(e) {

        }
        return body || { };
    }
    
    extractError(err, form?) {
        
        let errors
        try {
          errors = JSON.parse(err._body)
        } catch(e) {
            console.error('not valid json', err._body)
            this.fs.show({
                title: 'Error handling error',
                text: 'Error in error handling'
            })
            return e;
        }

        errors.messages.map(message => {        
            this.fs.show({
                title: message.type,
                text: message.text,
                type: 'error'
            })
        })
        if (form) {
            let obj = {}
            
            errors.validations.map(val => {
                obj = this.convertArrToObj(val, obj)
            })

            let notProcessed = {}

            for (let i in obj) {
                if (form.contains(i)) {
                    form.get(i).setErrors(obj[i])
                } else {
                    notProcessed[i] = obj[i]
                }
            }

            return Observable.throw(notProcessed);
        } else {
            return Observable.throw(errors);
        }
    }
    
    convertArrToObj(val, obj) {
        let _obj = {}
        let f = val.field.splice(0,1)
    
        if (typeof obj[f] === 'undefined') {
          obj[f] = []
        }
    
        if (val.field.length === 0) {
          if (typeof obj[f].messages === 'undefined') {
            obj[f].messages = []
          }
          obj[f].messages.push(val.type)
        } else {
          obj[f] = this.convertArrToObj(val, obj[f])
        }
    
        return obj
    }

    unnulling(obj){
        if (!obj || obj._isEmpty) {
            return null;
        }

        if (
            typeof obj === 'string' ||
            typeof obj === 'number' ||
            typeof obj === 'boolean'
        ) {
            return obj
        }

        for (let i in obj) {
            if (i !== '_isEmpty') {
                if (Array.isArray(obj[i])) {
                    let arr = [];
                    for (let j = 0, max_j = obj[i].length; j < max_j; j += 1) {
                        let item = this.unnulling(obj[i][j]);
                        if (item !== null) {
                            arr.push(item);
                        }
                    }                   
                    obj[i] = arr;
                } else {
                    obj[i] = this.unnulling(obj[i]);
                }
            }
        }

        return obj;

    }
}
